# name: "CI"

# on: [ push]
# jobs:
#   validation-PSR-CodeSniffer-PHPStan:
#     name: "validation du PHP"
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2

#     - name: Setup PHP
#       uses: shivammathur/setup-php@v2
#       with: 
#           php-version: '8.0.3'
#           tools: phpstan, composer

#     - name: Validate composer.json and composer.lock
#       run: composer validate

#     - name: Get Composer Cache Directory
#       id: composer-cache
#       run: echo "::set-output name=dir::$(composer config cache-file-dir)"
      
#     - name: Cache Composer Dependencies 
#       uses: actions/cache@v2
#       with:
#         path: ~/.composer/cache/
#         key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#         restore-keys: |
#           ${{ runner.os }}-composer-

#     - name: Install dependencies
#       run: composer install --prefer-dist --no-progress

#     - name: Install PHP_CodeSniffer composer package
#       run: composer global require "squizlabs/php_codesniffer=*"

#     - name: Validate PSR-12 Code Style
#       run: ~/.composer/vendor/bin/phpcs

#     - name: Run PHPStan
#       run: phpstan analyse src

#   tests-unitaires:
#     name: "Tests Unitaires"

#     runs-on: "ubuntu-latest"

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     php-version:
    #       - "8.0"
        
    #     symfony-version:
    #       - "^4.23"

    #     coverage-driver:
    #       - "xdebug"
    #       - "xdebug3"

    # steps:
    #   - name: "Checkout"
    #     uses: "actions/checkout@v2"

    #   - name: "Install PHP"
    #     uses: "shivammathur/setup-php@v2"
    #     with:
    #       php-version: "${{ matrix.php-version }}"
    #       coverage: "${{ matrix.coverage-driver }}"

    #   - name: "Cache dependencies installed with composer"
    #     uses: "actions/cache@v2"
    #     with:
    #       path: "~/.composer/cache"
    #       key: "php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
    #       restore-keys: "php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"
      
    #   - name: "Setup Mysql"
    #     env:
    #       DB_DATABASE: main
    #       DB_USER: root
    #       DB_PASSWORD: root
    #       DATABASE_URL: "mysql://root:root@127.0.0.1:3306/main"
    #     run: |
    #       sudo /etc/init.d/mysql start
    #       mysql --version
    #       mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

    #   - name: "Install dependencies"
    #     run: "composer update --no-ansi --no-interaction --no-progress"

    #   - name: "Run migration"
    #     run: |
    #       php bin/console doctrine:migrations:migrate
    #       php bin/console doctrine:fixtures:load
  

        # - name: "Run tests with phpunit/phpunit"
        #   run: "APP_ENV=test vendor/bin/phpunit --coverage-clover=coverage.xml"

        # - name: "Send code coverage report to Codecov.io"
        #   env:
        #     CODECOV_TOKEN: "bf364162-9acf-47f1-924f-2aa5c93f5d87"
        #   run: "bash <(curl -s https://codecov.io/bash) || true"


    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test

name: Testing Symfony with MySQL
on: [push]
jobs:
  symfony:
    name: Symfony (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: symfony
          MYSQL_DATABASE: symfony
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.3', '7.4']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug #optional
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: |
          composer require --dev symfony/orm-pack symfony/phpunit-bridge
          composer install --no-progress --prefer-dist --optimize-autoloader
          php bin/phpunit install
      - name: Run Migration
        run: |
          php bin/console doctrine:schema:update --force || echo "No migrations found or schema update failed"
          php bin/console doctrine:migrations:migrate || echo "No migrations found or migration failed"
        env:
          DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony
      - name: Run Tests
        run: php bin/phpunit --coverage-text
