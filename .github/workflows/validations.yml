name: "CI"

on: [ push]
jobs:
  validation-PSR-CodeSniffer-PHPStan:
    name: "validation du PHP"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with: 
          php-version: '8.0.3'
          tools: phpstan, composer

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-file-dir)"
      
    - name: Cache Composer Dependencies 
      uses: actions/cache@v2
      with:
        path: ~/.composer/cache/
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install PHP_CodeSniffer composer package
      run: composer global require "squizlabs/php_codesniffer=*"

    - name: Validate PSR-12 Code Style
      run: ~/.composer/vendor/bin/phpcs

    - name: Run PHPStan
      run: phpstan analyse src

  tests-unitaires:
    name: "Tests Unitaires"

    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        php-version: "8.0.3"
        coverage-driver: "xdebug3"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "${{ matrix.coverage-driver }}"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: "php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install dependencies"
        run: "composer update --no-ansi --no-interaction --no-progress"

      - name: "Run tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --coverage-clover=coverage.xml"

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: "bf364162-9acf-47f1-924f-2aa5c93f5d87"
        run: "bash <(curl -s https://codecov.io/bash) || true"


    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test
